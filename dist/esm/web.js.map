{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  ModernNotificationsPlugin,\n  ScheduleOptions,\n  NotificationResult,\n  PermissionStatus,\n  NotificationChannel,\n  ProgressStylePoint,\n  ProgressStyleSegment,\n  ProgressStyleOptions,\n} from './definitions';\n\nexport class ModernNotificationsWeb extends WebPlugin implements ModernNotificationsPlugin {\n  private notifications: any[] = [];\n  private deliveredNotifications: any[] = [];\n  private channels: NotificationChannel[] = [];\n  private permission: 'granted' | 'denied' | 'prompt' = 'prompt';\n\n  async requestPermissions(): Promise<PermissionStatus> {\n    // Check if Notification API is supported\n    if (!('Notification' in window)) {\n      console.warn('This browser does not support desktop notifications');\n      this.permission = 'denied';\n      return { display: 'denied' };\n    }\n\n    // Request permission\n    const permission = await Notification.requestPermission();\n    this.permission = permission === 'granted' ? 'granted' : 'denied';\n    \n    return { display: this.permission };\n  }\n\n  async checkPermissions(): Promise<PermissionStatus> {\n    if (!('Notification' in window)) {\n      return { display: 'denied' };\n    }\n\n    this.permission = Notification.permission === 'granted' ? 'granted' : \n                     Notification.permission === 'denied' ? 'denied' : 'prompt';\n    \n    return { display: this.permission };\n  }\n\n  async schedule(options: ScheduleOptions): Promise<NotificationResult> {\n    const { notifications } = options;\n    \n    if (this.permission !== 'granted') {\n      throw new Error('Permission not granted for notifications');\n    }\n\n    for (const notification of notifications) {\n      if (notification.schedule?.at) {\n        // Schedule for specific time\n        const delay = notification.schedule.at.getTime() - Date.now();\n        if (delay > 0) {\n          setTimeout(() => {\n            this.showNotification(notification);\n          }, delay);\n        }\n      } else if (notification.schedule?.after) {\n        // Schedule after delay\n        setTimeout(() => {\n          this.showNotification(notification);\n        }, notification.schedule.after);\n      } else {\n        // Show immediately\n        this.showNotification(notification);\n      }\n      \n      this.notifications.push(notification);\n    }\n\n    return { notifications };\n  }\n\n  private showNotification(notification: any): void {\n    const options: NotificationOptions = {\n      body: notification.body,\n      icon: notification.largeIcon || notification.smallIcon,\n      badge: notification.badge,\n      tag: notification.id.toString(),\n      data: {\n        ...notification.extra,\n        id: notification.id,\n        progressStyle: notification.progressStyle,\n      },\n    };\n\n    const webNotification = new Notification(notification.title, options);\n    \n    webNotification.onclick = () => {\n      // Notify action performed when clicked\n      this.notifyListeners('localNotificationActionPerformed', {\n        notification,\n        actionId: 'tap',\n      });\n      webNotification.close();\n    };\n\n    webNotification.onshow = () => {\n      // Notify when notification is received/shown\n      this.notifyListeners('localNotificationReceived', {\n        notification,\n      });\n    };\n\n    // Move to delivered\n    this.deliveredNotifications.push(notification);\n    \n    // Remove from pending\n    const index = this.notifications.findIndex(n => n.id === notification.id);\n    if (index > -1) {\n      this.notifications.splice(index, 1);\n    }\n  }\n\n  async getPending(): Promise<NotificationResult> {\n    return { notifications: this.notifications };\n  }\n\n  async getDelivered(): Promise<NotificationResult> {\n    return { notifications: this.deliveredNotifications };\n  }\n\n  async cancel(options: { notifications: { id: number }[] }): Promise<void> {\n    const idsToCancel = options.notifications.map(n => n.id);\n    this.notifications = this.notifications.filter(n => !idsToCancel.includes(n.id));\n  }\n\n  async cancelAll(): Promise<void> {\n    this.notifications = [];\n  }\n\n  async removeDelivered(options: { notifications: { id: number }[] }): Promise<void> {\n    const idsToRemove = options.notifications.map(n => n.id);\n    this.deliveredNotifications = this.deliveredNotifications.filter(\n      n => !idsToRemove.includes(n.id)\n    );\n  }\n\n  async removeAllDelivered(): Promise<void> {\n    this.deliveredNotifications = [];\n  }\n\n  async createChannel(channel: NotificationChannel): Promise<void> {\n    // Web doesn't support channels, but we'll store for consistency\n    this.channels.push(channel);\n    console.log('Channel created (web implementation):', channel);\n  }\n\n  async deleteChannel(options: { id: string }): Promise<void> {\n    this.channels = this.channels.filter(c => c.id !== options.id);\n    console.log('Channel deleted (web implementation):', options.id);\n  }\n\n  async listChannels(): Promise<{ channels: NotificationChannel[] }> {\n    return { channels: this.channels };\n  }\n\n  async updateProgress(options: {\n    id: number;\n    progress: number;\n    progressStyle?: ProgressStyleOptions;\n  }): Promise<void> {\n    // Find notification and update progress\n    const notification = this.deliveredNotifications.find(n => n.id === options.id);\n    if (notification && notification.progressStyle) {\n      notification.progressStyle.progress = options.progress;\n      if (options.progressStyle) {\n        notification.progressStyle = { ...notification.progressStyle, ...options.progressStyle };\n      }\n      console.log('Progress updated (web implementation):', options);\n    }\n  }\n\n  async addProgressPoints(options: {\n    id: number;\n    points: ProgressStylePoint[];\n  }): Promise<void> {\n    const notification = this.deliveredNotifications.find(n => n.id === options.id);\n    if (notification && notification.progressStyle) {\n      if (!notification.progressStyle.points) {\n        notification.progressStyle.points = [];\n      }\n      notification.progressStyle.points.push(...options.points);\n      console.log('Progress points added (web implementation):', options);\n    }\n  }\n\n  async updateProgressSegments(options: {\n    id: number;\n    segments: ProgressStyleSegment[];\n  }): Promise<void> {\n    const notification = this.deliveredNotifications.find(n => n.id === options.id);\n    if (notification && notification.progressStyle) {\n      notification.progressStyle.segments = options.segments;\n      console.log('Progress segments updated (web implementation):', options);\n    }\n  }\n\n\n}\n"]}