{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Interface for Progress-centric notifications in Android 16\n */\nexport interface ProgressStylePoint {\n  /**\n   * Position of the point on the progress bar\n   */\n  position: number;\n  \n  /**\n   * Color of the point (hex color string, e.g., \"#FF0000\" for red)\n   */\n  color?: string;\n  \n  /**\n   * Icon resource name for the point\n   */\n  icon?: string;\n}\n\nexport interface ProgressStyleSegment {\n  /**\n   * Length of the segment\n   */\n  length: number;\n  \n  /**\n   * Color of the segment (hex color string, e.g., \"#FFFF00\" for yellow)\n   */\n  color?: string;\n}\n\nexport interface NotificationAction {\n  /**\n   * Unique identifier for the action\n   */\n  id: string;\n  \n  /**\n   * Title displayed for the action\n   */\n  title: string;\n  \n  /**\n   * Icon resource name for the action\n   */\n  icon?: string;\n  \n  /**\n   * Whether the action requires authentication\n   */\n  requiresAuthentication?: boolean;\n}\n\nexport interface ProgressStyleOptions {\n  /**\n   * Whether the progress bar should be styled by progress value\n   */\n  styledByProgress?: boolean;\n  \n  /**\n   * Current progress value\n   */\n  progress: number;\n  \n  /**\n   * Maximum progress value (default: 100)\n   */\n  maxProgress?: number;\n  \n  /**\n   * Icon resource name for the progress tracker\n   */\n  trackerIcon?: string;\n  \n  /**\n   * Array of segments for the progress bar\n   */\n  segments?: ProgressStyleSegment[];\n  \n  /**\n   * Array of points on the progress bar\n   */\n  points?: ProgressStylePoint[];\n}\n\nexport interface LocalNotificationSchedule {\n  /**\n   * Schedule notification at a specific date/time\n   */\n  at?: Date;\n  \n  /**\n   * Schedule notification to repeat\n   */\n  repeats?: boolean;\n  \n  /**\n   * Schedule notification after a delay (in milliseconds)\n   */\n  after?: number;\n  \n  /**\n   * Schedule notification on specific days of the week (1-7, where 1 is Sunday)\n   */\n  on?: {\n    weekday?: number;\n    hour?: number;\n    minute?: number;\n  };\n}\n\nexport interface LocalNotification {\n  /**\n   * Unique identifier for the notification\n   */\n  id: number;\n  \n  /**\n   * Title of the notification\n   */\n  title: string;\n  \n  /**\n   * Body text of the notification\n   */\n  body: string;\n  \n  /**\n   * Subtext displayed in the header\n   */\n  subText?: string;\n  \n  /**\n   * Large icon for the notification (resource name or URL)\n   */\n  largeIcon?: string;\n  \n  /**\n   * Small icon for the notification (resource name)\n   */\n  smallIcon?: string;\n  \n  /**\n   * Notification channel ID (Android)\n   */\n  channelId?: string;\n  \n  /**\n   * Sound to play (resource name or 'default')\n   */\n  sound?: string;\n  \n  /**\n   * Whether to show a badge (iOS)\n   */\n  badge?: number;\n  \n  /**\n   * Extra data to include with the notification\n   */\n  extra?: any;\n  \n  /**\n   * Actions available on the notification\n   */\n  actions?: NotificationAction[];\n  \n  /**\n   * Progress-centric notification style (Android 16+)\n   */\n  progressStyle?: ProgressStyleOptions;\n  \n  /**\n   * Schedule options for the notification\n   */\n  schedule?: LocalNotificationSchedule;\n  \n  /**\n   * Priority level (Android)\n   */\n  priority?: 'high' | 'normal' | 'low' | 'min';\n  \n  /**\n   * Importance level (Android 8.0+)\n   */\n  importance?: 'high' | 'default' | 'low' | 'min';\n  \n  /**\n   * Auto-cancel notification when tapped\n   */\n  autoCancel?: boolean;\n  \n  /**\n   * Make notification ongoing\n   */\n  ongoing?: boolean;\n  \n  /**\n   * Show notification timestamp\n   */\n  showWhen?: boolean;\n  \n  /**\n   * Custom timestamp for the notification\n   */\n  when?: Date;\n}\n\nexport interface NotificationChannel {\n  /**\n   * Unique identifier for the channel\n   */\n  id: string;\n  \n  /**\n   * Name of the channel (visible to users)\n   */\n  name: string;\n  \n  /**\n   * Description of the channel\n   */\n  description?: string;\n  \n  /**\n   * Importance level for notifications in this channel\n   */\n  importance?: 'high' | 'default' | 'low' | 'min';\n  \n  /**\n   * Enable vibration for notifications in this channel\n   */\n  vibration?: boolean;\n  \n  /**\n   * Vibration pattern (array of milliseconds)\n   */\n  vibrationPattern?: number[];\n  \n  /**\n   * Enable LED light for notifications\n   */\n  lights?: boolean;\n  \n  /**\n   * LED light color (hex color string)\n   */\n  lightColor?: string;\n  \n  /**\n   * Sound for notifications in this channel\n   */\n  sound?: string;\n}\n\nexport interface ScheduleOptions {\n  notifications: LocalNotification[];\n}\n\nexport interface NotificationResult {\n  /**\n   * Array of scheduled notifications\n   */\n  notifications: LocalNotification[];\n}\n\nexport interface ActionPerformed {\n  /**\n   * The notification that was acted upon\n   */\n  notification: LocalNotification;\n  \n  /**\n   * The action that was performed\n   */\n  actionId: string;\n  \n  /**\n   * Input text if the action had a text input\n   */\n  inputValue?: string;\n}\n\nexport interface PermissionStatus {\n  /**\n   * Permission state for local notifications\n   */\n  display: 'granted' | 'denied' | 'prompt';\n}\n\nexport interface ModernNotificationsPlugin {\n  /**\n   * Request permission to display local notifications\n   */\n  requestPermissions(): Promise<PermissionStatus>;\n  \n  /**\n   * Check current permission status\n   */\n  checkPermissions(): Promise<PermissionStatus>;\n  \n  /**\n   * Schedule one or more local notifications\n   */\n  schedule(options: ScheduleOptions): Promise<NotificationResult>;\n  \n  /**\n   * Get a list of pending notifications\n   */\n  getPending(): Promise<NotificationResult>;\n  \n  /**\n   * Get a list of delivered notifications\n   */\n  getDelivered(): Promise<NotificationResult>;\n  \n  /**\n   * Cancel specific notifications by ID\n   */\n  cancel(options: { notifications: { id: number }[] }): Promise<void>;\n  \n  /**\n   * Cancel all pending notifications\n   */\n  cancelAll(): Promise<void>;\n  \n  /**\n   * Remove specific delivered notifications by ID\n   */\n  removeDelivered(options: { notifications: { id: number }[] }): Promise<void>;\n  \n  /**\n   * Remove all delivered notifications\n   */\n  removeAllDelivered(): Promise<void>;\n  \n  /**\n   * Create a notification channel (Android)\n   */\n  createChannel(channel: NotificationChannel): Promise<void>;\n  \n  /**\n   * Delete a notification channel (Android)\n   */\n  deleteChannel(options: { id: string }): Promise<void>;\n  \n  /**\n   * List all notification channels (Android)\n   */\n  listChannels(): Promise<{ channels: NotificationChannel[] }>;\n  \n  /**\n   * Update progress for a progress-centric notification\n   */\n  updateProgress(options: {\n    id: number;\n    progress: number;\n    progressStyle?: ProgressStyleOptions;\n  }): Promise<void>;\n  \n  /**\n   * Add points to a progress-centric notification\n   */\n  addProgressPoints(options: {\n    id: number;\n    points: ProgressStylePoint[];\n  }): Promise<void>;\n  \n  /**\n   * Update segments in a progress-centric notification\n   */\n  updateProgressSegments(options: {\n    id: number;\n    segments: ProgressStyleSegment[];\n  }): Promise<void>;\n}\n"]}